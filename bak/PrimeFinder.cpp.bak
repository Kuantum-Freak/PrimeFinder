/* 

 */
 
#include <cstdlib>
#include <iostream>
#include <vector>
#include <chrono>

#if (defined (LINUX) || defined (__linux__))
	#include <thread>
	#include <mutex>
	#include <condition_variable>
#elif (defined (_WIN32) || defined (_WIN64))
	#include "mingw.thread.h"
	#include "mingw.mutex.h"
#endif

int NUM_OF_THREADS = 2;
bool dP = false;
bool dAll = false;
const long START = 2;
long END   = 10000;
				// 1,000,000
struct ReturnData {
	long primesFound = 0;
	double time = 0;
	bool isPrime = false;
	unsigned long long nextPrime = 0;
};

struct parseInfo {
	bool testSpecificPrime = false;
	bool findNextPrime = false;
	unsigned long long testNum = 0;
};

namespace MThreaded {
	namespace bySection {		
		std::mutex mtx;
		std::vector<std::vector<unsigned int> > foundPrimes;

		bool testForPrime(const unsigned int num) {
			for(unsigned int i = 2; i < num; ++i) {
				if(num % i == 0) {
					return false;
				}
			}
			return true;
		}

		void lookForPrimes(const unsigned int start, const unsigned int end) {
			std::vector<unsigned int>foundPrimes_local;
			foundPrimes_local.reserve(end - start + 100);
			
			for(unsigned int i = start; i <= end; i++) {
				if(testForPrime(i)) {
					foundPrimes_local.push_back(i);
				}
			}
			mtx.lock();
			foundPrimes.push_back(foundPrimes_local);
			mtx.unlock();
		}

		void displayPrimes() {
			std::cout << std::endl;
			for(auto& v: foundPrimes) {
				for(auto i: v)
					std::cout << i << "\t";
			}
		}

		ReturnData run() {
			using namespace std;
			using namespace std::chrono;
	
			vector<thread> threads; // vector storing threads
			
			threads.reserve(NUM_OF_THREADS);
			foundPrimes.reserve(END + 100);
			
			long distance = ((END - START) / NUM_OF_THREADS);
			
			/** 
				divide the whole section where to look for primes
				in to number of threads. then multiply that with
				the thread to find the end values
				EX.
				start = 3
				end = 100
				num of threads = 3
				end - start = 97
				97 / 3 = 33.333333 = 33
				section 1 = start + distance * 1 = 3  to 33
				section 2 = start + distance * 2 = 34 to 66
				section 3 = (end 2 + 1) to end   = 67 to 100
			 **/
			auto startTime = steady_clock::now();
			for(int i = 0; i < NUM_OF_THREADS - 1; ++i)
				threads.push_back(thread(lookForPrimes, START + (distance * (i)), START + (distance * (i + 1))));
			threads.push_back(thread(lookForPrimes, START + (distance * (NUM_OF_THREADS - 1)), END));

			for(auto& t: threads) t.join();
			
			auto endTime = steady_clock::now();
			auto diff = endTime - startTime;
			auto nseconds = double(diff.count()) * steady_clock::period::num / steady_clock::period::den;
			
			if(dAll) {
				cout << "Primes: ";
				displayPrimes();
				cout << endl;
			}
			
			ReturnData data;
			//long size = 0;
			for(auto& v: foundPrimes)
				for(auto& i: v)
					data.primesFound++;
			// = size;
			data.time = nseconds;
			
			return data;
		}
	
	}
	
	namespace byNumber {
		std::mutex testing;
		std::mutex found;
		std::vector<long> foundPrimes;
		std::vector<long> testedPrimes(1, START - 1);

		bool testForPrime(const unsigned long num) {
			for(unsigned int i = 2; i < num; ++i) {
				if(num % i == 0) {
					return false;
				}
			}
			return true;
		}

		void lookForPrimes() {
			while(true) {
				testing.lock();
				long num = testedPrimes.back() + 1;
				testedPrimes.push_back(num);
				testing.unlock();
				
				if(num > END)
					break;
				
				if(testForPrime(num)) {
					found.lock();
					foundPrimes.push_back(num);
					found.unlock();
				}
			}
		}

		void displayPrimes() {
			std::cout << std::endl;
			for(auto& v: foundPrimes) {
				std::cout << v << "\t";
			}
		}

		ReturnData run() {
			using namespace std::chrono;
			using namespace std;
			
			vector<thread> threads; // vector storing threads
			
			threads.reserve(NUM_OF_THREADS);
			foundPrimes.reserve(END + 100);
			
			auto startTime = steady_clock::now();
			for(int i = 0; i < NUM_OF_THREADS; ++i)
				threads.push_back(thread(lookForPrimes));

			for(auto& t: threads) t.join();
			
			auto endTime = steady_clock::now();
			auto diff = endTime - startTime;
			auto nseconds = double(diff.count()) * steady_clock::period::num / steady_clock::period::den;
			
			if(dAll) {
				cout << "Primes: ";
				displayPrimes();
				cout << endl;
			}
			
			ReturnData data;
			data.primesFound = foundPrimes.size();
			data.time = nseconds;
			
			return data;
		}

	}
}

namespace SThreaded {
	std::vector<long> foundPrimes;

	bool testForPrime(const unsigned int num) {
		for(unsigned int i = 2; i < num; ++i) {
			if(num % i == 0) {
				return false;
			}
		}
		return true;
	}

	void lookForPrimes(const unsigned int start, const unsigned int end) {		
		for(unsigned int i = start; i <= end; i++)
			if(testForPrime(i))
				foundPrimes.push_back(i);
	}

	void displayPrimes() {
		for(auto& v: foundPrimes)
			std::cout << v << "\t";
	}

	ReturnData run() {
		using namespace std::chrono;
		using std::cout;
		using std::endl;
		
		foundPrimes.reserve(END + 100);
		
		auto start = steady_clock::now();
		lookForPrimes(START, END);
		auto end = steady_clock::now();
		
		
		auto diff = end - start;
		auto nseconds = double(diff.count()) * steady_clock::period::num / steady_clock::period::den;
		
		if(dAll) {
			cout << "Primes: ";
			displayPrimes();
			cout << endl;
		}
		
		ReturnData data;
		data.primesFound = foundPrimes.size();
		data.time = nseconds;
		
		return data;
	}

}

void helpText() {
	using std::cout;
	using std::endl;
	cout << "HELP TEXT:\n\n" << "Parameter\tDefault\tDetails" << endl;
	cout << "-t <arg>\t" << NUM_OF_THREADS << "\t1st argument is number of threads\n"
		 << "-e <arg>\t" << END            << "\t2nd argument is the maximum number\n"
		 << "-d \t"      << dP             << "\t3rd argument is whether to displayt the found primes\n"
		 << "-dall \t"   << dAll           << "\t4th argument is whether to primes from all threads\n" << endl << endl;
		 
	cout << "Example: .\\PrimeFinder.exe -t 7 -e 500000 -d -dall" << endl;
		 
	exit(1);
}

parseInfo parse(int argc, char* argv[]) {
	parseInfo info;
	for(int i = 1; i < argc; ++i) {
		if       (strcmp(argv[i],"-t") == 0) {
			NUM_OF_THREADS = atoi(argv[i + 1]);
			i++;
		} else if(strcmp(argv[i], "-e") == 0) {
			END = static_cast<long>(atoi(argv[i + 1]));
			i++;
		} else if(strcmp(argv[i], "-d") == 0) {
			dP = true;
		} else if(strcmp(argv[i], "-dall") == 0) {
			dAll = true;
		} else if(strcmp(argv[i], "/?") == 0 || strcmp(argv[i], "-?") == 0 )
			helpText();
		else
			helpText();
	}
	return info;
}

int main(int argc, char* argv[]) {
	using namespace std;
	
	parseInfo info = parse(argc, argv);
	
	// Single Thread
	cout << "Running Single Thread: \n";
	ReturnData ST = SThreaded::run();
	cout << ST.primesFound << " primes found between " << START << " and " << END << " using " << 1 << " cores in " << ST.time << " seconds." << endl << endl;	
	// Multi Thread using sections
	cout << "Running Multi Thread by Sections: \n";
	ReturnData MTBS = MThreaded::bySection::run();
	cout << MTBS.primesFound << " primes found between " << START << " and " << END << " using " << NUM_OF_THREADS << " cores in " << MTBS.time << " seconds." << endl << endl;
	// Multi Thread using individual numbers or a thread pool
	cout << "Running Multi Thread by Individual Numbers (thread pool): \n";
	ReturnData MTBN = MThreaded::byNumber::run();
	cout << MTBN.primesFound << " primes found between " << START << " and " << END << " using " << NUM_OF_THREADS << " cores in " << MTBN.time << " seconds." << endl << endl;

	if(!dAll && dP) {
		MThreaded::byNumber::displayPrimes();
	}
}